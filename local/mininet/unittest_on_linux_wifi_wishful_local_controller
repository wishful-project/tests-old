#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
unittest_on_linux_wifi_wishful_local_controller.py: First implementation of WiSHFUL controller

Usage:
   unittest_on_linux_wifi_wishful_local_controller.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./unittest_on_linux_wifi_wishful_local_controller -v --config ./config.yaml

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_agent
import time
import yaml
import wishful_upis as upis
from wishful_framework import TimeEvent, PktEvent, MovAvgFilter, PeakDetector, Match, Action, Permanance, PktMatch, FieldSelector


__author__ = "Zubow"
__copyright__ = "Copyright (c) 2016, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "zubow@tkn.tu-berlin.de"


log = logging.getLogger('wishful_agent.main')
agent = wishful_agent.Agent(local=True)
controller = agent.get_local_controller()

@controller.set_default_callback()
def default_callback(cmd, data):
    log.info("{} DEFAULT CALLBACK : Cmd: {}, Returns: {}".format(datetime.datetime.now(), cmd, data))


def pkt_based_rule_matched(ruleId, data):
    log.info("{} Pkt Rule with id: {} was matched; Data: {}".format(datetime.datetime.now(), ruleId, data))


def main(args):
    log.debug(args)

    log.info('--- main ---')

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    agent.load_config(config)
    agent.run()

    wface = 'ap1-wlan0'

    log.info('--- 1. test ---')
    ''' 1. Test some basic 802.11 monitoring functionality '''
    for blocking_call in [True, False]:
        controller.blocking(blocking_call).net.iface(wface).get_inactivity_time_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_avg_sigpower_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_sigpower_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_tx_retries_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_tx_packets_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_tx_failed_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_tx_bytes_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_tx_bitrate_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_rx_bytes_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_rx_packets_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_authorized_connected_device()
        controller.blocking(blocking_call).net.iface(wface).get_authenticated_connected_device()
        controller.blocking(blocking_call).net.iface(wface).get_used_preamble_connected_device()
        controller.blocking(blocking_call).net.iface(wface).get_mfp_connected_device()
        controller.blocking(blocking_call).net.iface(wface).get_wmm_wme_connected_device()
        controller.blocking(blocking_call).net.iface(wface).get_tdls_peer_connected_device()

    log.info('--- 2. test ---')
    ''' 2. rule-based matching '''
    if False:
        log.info("{} Installing new packet based rule".format(datetime.datetime.now()))
        ruleDesc = controller.rule.add(event=PktEvent(iface="mon0"),
                                       pktMatch=PktMatch("icmp"),
                                       selector=FieldSelector("Radiotap.rssi"),
                                       filters=[MovAvgFilter(10), ],
                                       match=Match("<", 10),
                                       action=Action(upis.radio.set_channel, iface="wlan0", kwargs={"channel":8}),
                                       permanence=Permanance.PERSISTENT,
                                       ctrl_callback=pkt_based_rule_matched)

        log.info("{} New rule with ID: {} was added".format(datetime.datetime.now(), ruleDesc.id))
        time.sleep(20)

        retVal = ruleDesc.remove()


if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    except Exception as ex:
        log.fatal(ex)
    finally:
        log.debug("Exit")
        agent.stop()