#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
wishful_simple_local_controller.py: First implementation of WiSHFUL controller

Usage:
   wishful_simple_local_controller.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./wishful_simple_local_controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_agent
import time
import yaml
import wishful_upis as upis

__author__ = "Piotr Gawlowicz"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "gawlowicz@tkn.tu-berlin.de"


log = logging.getLogger('wishful_agent.main')
agent = wishful_agent.Agent(local=True)
controller = agent.get_local_controller()

@controller.set_default_callback()
def default_callback(cmd, data):
    log.info("{} DEFAULT CALLBACK : Cmd: {}, Returns: {}".format(datetime.datetime.now(), cmd, data))


def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    agent.load_config(config)
    agent.run()

    wface = 'ap1-wlan0'

    blocking_call = True
    while True:

        controller.blocking(blocking_call).net.iface(wface).get_inactivity_time_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_avg_sigpower_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_sigpower_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_tx_retries_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_tx_packets_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_tx_failed_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_tx_bytes_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_tx_bitrate_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_rx_bytes_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_rx_packets_of_connected_devices()
        controller.blocking(blocking_call).net.iface(wface).get_authorized_connected_device()
        controller.blocking(blocking_call).net.iface(wface).get_authenticated_connected_device()
        controller.blocking(blocking_call).net.iface(wface).get_used_preamble_connected_device()
        controller.blocking(blocking_call).net.iface(wface).get_mfp_connected_device()
        controller.blocking(blocking_call).net.iface(wface).get_wmm_wme_connected_device()
        controller.blocking(blocking_call).net.iface(wface).get_tdls_peer_connected_device()

        time.sleep(1)
        blocking_call = False

if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        agent.stop()